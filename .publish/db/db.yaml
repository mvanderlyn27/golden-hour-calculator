apiVersion: v1
kind: Secret
metadata:
  name: photo-spot-db-password
  namespace: photo-spot
data:
  POSTGRES_PASSWORD: c3Ryb25nLXBhc3N3b3JkLWxvbA==
  # This creates a user and a db with the same name.
  POSTGRES_USER: c3RhcGxl
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: photo-spot-initdb-script
  namespace: photo-spot
  labels:
    app: photo-spot
data:
  photo-spot_initdb.sql:
    create table users (email varchar(255), password text, confirm_code text, max_photo-spots int);
    create table photo-spot (name varchar(255), id serial, content text, created_at timestamp, archived bool, user_email varchar(255));
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: photo-spot 
  name: storage-photo-spot-db
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: photo-spot-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: photo-spot
  name: photo-spot-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: photo-spot-db
  template:
    metadata:
      name: photo-spot-db
      labels:
        app: photo-spot-db
    spec:
      containers:
      - name: postgres
        image: postgres:11
        env:
          - name: POSTGRES_USER
            value: photo-spot
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: photo-spot-db-password
                key: POSTGRES_PASSWORD
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          subPath: data # important so it gets mounted correctly
          name: photo-spot-db-data
        - mountPath: /docker-entrypoint-initdb.d/photo-spot_initdb.sql
          subPath: photo-spot_initdb.sql
          name: bootstrap-script
      volumes:
        - name: photo-spot-db-data
          persistentVolumeClaim:
            claimName: storage-photo-spot-db
        - name: bootstrap-script
          configMap:
            name: photo-spot-initdb-script
---
kind: Service
apiVersion: v1
metadata:
  namespace: photo-spot
  name: photo-spot-db-service
spec:
  ports:
  - port: 5432
  selector:
    app: photo-spot-db
  clusterIP: None